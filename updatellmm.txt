A continuaci√≥n tienes **todo el ‚Äúcerebro‚Äù de tu Cinema AI** ya listo para pegar en tu proyecto. Consta de dos partes:

1. **Explicaci√≥n mejorada (no t√©cnica) de la l√≥gica profesional**
   ‚Äì c√≥mo Storyteller AI piensa seg√∫n estilo (`realistic`, `anime`, `commercial`, etc.) y duraci√≥n (10 s, 15 s, 30 s, 45 s, 60 s).

2. **Archivo completo `LLMService.ts`**
   ‚Äì genera el *VideoPlan* meticuloso que alimentar√° tu `clipService.ts`, usando √∫nicamente **Replicate API**, **Murf**, **ElevenLabs** y **Freesound**.

---

## 1‚ÄÇ¬∑‚ÄÇL√≥gica profesional (versi√≥n sencilla y ultra-detallada)

### a) Entrada del usuario

```json
{
  "prompt":  "Una chica encuentra una puerta m√°gica en el bosque",
  "style":   "anime",          // realistic ¬∑ anime ¬∑ cartoon ¬∑ game ¬∑ commercial
  "duration": 30               // 10 ¬∑ 15 ¬∑ 30 ¬∑ 45 ¬∑ 60  (segundos)
}
```

### b) C√≥mo piensa Storyteller AI (rol de equipo de cine)

| Rol virtual             | Pregunta clave que responde                                              |
| ----------------------- | ------------------------------------------------------------------------ |
| **Guionista**           | ¬øQu√© tres, cinco, siete o nueve ‚Äúbeats‚Äù le dan sentido a la historia?    |
| **Director**            | ¬øQu√© emoci√≥n domina cada beat? ¬øC√≥mo evoluciona el arco de la chica?     |
| **DP**                  | ¬øQu√© plano, √°ngulo y lente transmiten mejor esa emoci√≥n por escena?      |
| **Dise√±ador de sonido** | ¬øQu√© voz, m√∫sica y efectos realzan el momento exacto?                    |
| **Editor**              | ¬øD√≥nde cortar? ¬øQu√© transici√≥n usar? ¬øC√≥mo mantener ritmo y continuidad? |
| **Colorista**           | ¬øQu√© LUT y grano (o cel shading) unifican el look seg√∫n el estilo?       |

### c) Duraciones ‚Üí n¬∫ de escenas y transiciones

| Duraci√≥n final | Escenas (X seg) | Transiciones (1 seg) |
| -------------- | --------------- | -------------------- |
| **10 s**       | 2 √ó 4.5 s       | 1                    |
| **15 s**       | 3 √ó 4.5 s       | 2                    |
| **30 s**       | 5 √ó 5 s         | 4                    |
| **45 s**       | 7 √ó 5 s         | 6                    |
| **60 s**       | 9 √ó 5 s         | 8                    |

> *(La l√≥gica se ajusta a futuro si a√±ades otros tiempos; basta cambiar el `DurationMap` en el c√≥digo.)*

### d) C√≥mo se garantiza fluidez

1. **Escenas complementarias, no repetidas** ‚Äì cada beat avanza la historia.
2. **Prompts distintos pero coherentes** ‚Äì misma prota, misma luz base.
3. **Transici√≥n IA dedicada** de 1 s entre clips (whip-pan, part√≠culas, fundido).
4. **Audio puente** ‚Äì la m√∫sica mantiene tempo continuo; SFX y VO aparecen con *time-code* milim√©trico.
5. **Color unificado** ‚Äì LUT + grano (o cel shading) aplicado al final, no por clip.

---

## 2‚ÄÇ¬∑‚ÄÇ`LLMService.ts` ‚Äì archivo listo para producci√≥n

```ts
/*  Storyteller AI ¬∑ LLMService v7
 *  ---------------------------------------------------------------
 *  Toma un prompt simple y devuelve un VideoPlan profesional:
 *  ¬∑ Compatible con clipService.ts (Replicate)
 *  ¬∑ Compatible con ttsService (Murf / ElevenLabs)
 *  ¬∑ Incluye plan de escenas, audio, personajes y transiciones
 *  ¬∑ Soporta styles: realistic ¬∑ anime ¬∑ cartoon ¬∑ game ¬∑ commercial
 *  ¬∑ Soporta durations: 10 ¬∑ 15 ¬∑ 30 ¬∑ 45 ¬∑ 60 segundos
 */

import { OpenAI } from 'openai';
import { z }      from 'zod';
import { env }    from '../config/env.js';

// ---------- 1¬∑ Tipos y constantes b√°sicos -----------------------

export type Style =
  | 'realistic'
  | 'anime'
  | 'cartoon'
  | 'game'
  | 'commercial';

export type AllowedDuration = 10 | 15 | 30 | 45 | 60;

export interface Scene {
  id:          string;          // p.e. "01A"
  order:       number;          // 0-index
  start:       number;          // segs absolutos
  end:         number;          // segs absolutos
  prompt:      string;          // prompt completo para Replicate
  audioEvents: AudioEvent[];    // voz, sfx
  cam:         CameraSpec;
}

export interface AudioEvent {
  type:        'vo' | 'sfx';
  characterId?:string;          // para VO
  assetId?:    string;          // para SFX
  timecode:    number;          // relativo a comienzo de escena
  text?:       string;          // si es voz
}

export interface CameraSpec {
  lens:        number;          // mm simulados
  move:        string;          // "dolly in", "crane-down", etc.
  shot:        'wide' | 'medium' | 'close';
}

export interface CharacterSpec {
  id:      string;
  name:    string;
  age:     number;
  gender:  'male' | 'female';
  height:  string;
  build:   string;
  face:    string;
  wardrobe:string;
  voiceId: string;              // Murf o Eleven
  emotion: string;
}

export interface VideoPlan {
  prompt:      string;
  style:       Style;
  duration:    AllowedDuration;
  beats:       string[];
  characters:  CharacterSpec[];
  scenes:      Scene[];
  transitions: Transition[];
}

export interface Transition {
  between:  [string, string];   // ["01A","02B"]
  type:     string;             // "whip-pan", "particle-swirl", etc.
  duration: number;             // segundos (normalmente 1)
}

// Duraci√≥n ‚Üí n¬∫ escenas
const DurationMap: Record<AllowedDuration, number> = {
  10: 2, 15: 3, 30: 5, 45: 7, 60: 9,
};

// ---------- 2¬∑ Esquema Zod para validar -------------------------

const CameraSpecSchema = z.object({
  lens:       z.number(),
  move:       z.string(),
  shot:       z.enum(['wide', 'medium', 'close']),
});

const SceneSchema = z.object({
  id:          z.string(),
  order:       z.number(),
  start:       z.number(),
  end:         z.number(),
  prompt:      z.string(),
  audioEvents: z.array(z.any()),
  cam:         CameraSpecSchema,
});

const VideoPlanSchema = z.object({
  prompt:      z.string(),
  style:       z.enum(['realistic','anime','cartoon','game','commercial']),
  duration:    z.union([
                 z.literal(10),z.literal(15),z.literal(30),
                 z.literal(45),z.literal(60)
               ]),
  beats:       z.array(z.string()),
  characters:  z.array(z.any()),
  scenes:      z.array(SceneSchema),
  transitions: z.array(z.any()),
});

// ---------- 3¬∑ Cliente OpenAI ‚Äî GPT-4o --------------------------

const openai = new OpenAI({
  apiKey:  env.OPENROUTER_API_KEY,
  baseURL: env.OPENROUTER_BASE_URL,
  defaultHeaders: {
    'HTTP-Referer': env.OPENROUTER_HTTP_REFERER,
    'X-Title':      'StorytellerAI'
  }
});

// ---------- 4¬∑ Prompt ‚Äúdirector virtual‚Äù ------------------------

function buildSystemPrompt(style: Style, duration: AllowedDuration) {
  const nScenes   = DurationMap[duration];
  const nTrans    = nScenes - 1;
  const sceneDur  = duration / nScenes - 0.5;   // deja 0.5s de cola

  return `
Eres un equipo cinematogr√°fico profesional (guionista, director, DP, 
dise√±ador de sonido y editor) generando el PLAN DE RODAJE IA.

Tarea:
1. Divide la historia en ${nScenes} escenas de ~${sceneDur}s cada una.
2. Entre cada escena a√±ade un TRANSICI√ìN IA de 1s (total ${nTrans} transiciones).
3. Mant√©n coherencia de personajes y luz.
4. Estilo visual global: ‚Äú${style}‚Äù.
5. Devuelve la estructura JSON con:
   ‚Ä¢ beats (sinopsis corta cada escena)
   ‚Ä¢ characters (casting virtual)
   ‚Ä¢ scenes[].prompt (para Replicate)
   ‚Ä¢ scenes[].cam (lente mm, move, shot)
   ‚Ä¢ scenes[].audioEvents (voz, sfx con segundo relativo)
   ‚Ä¢ transitions[].type (‚Äúwhip-pan‚Äù, ‚Äúparticle-swirl‚Äù, etc.)
No devuelvas comentarios, solo JSON.`;
}

// ---------- 5¬∑ Funci√≥n principal --------------------------------

export async function createVideoPlan(
  userPrompt: string,
  style: Style,
  duration: AllowedDuration
): Promise<VideoPlan> {

  const messages = [
    { role: 'system', content: buildSystemPrompt(style, duration) },
    { role: 'user',   content: userPrompt }
  ];

  const chat = await openai.chat.completions.create({
    model:       'gpt-4o',
    temperature: 0.4,
    max_tokens:  2000,
    messages
  });

  // ----- Limpieza / self-heal JSON --------------------------------
  const raw = chat.choices[0].message.content ?? '{}';
  const repaired = await import('jsonrepair').then(m => m.jsonrepair(raw));

  const parsed = JSON.parse(repaired);
  const result = VideoPlanSchema.parse(parsed);   // lanza si no cumple

  // Verificaci√≥n de suma de tiempos
  const totalLength = result.scenes.reduce(
    (acc, s) => acc + (s.end - s.start), 0
  ) + result.transitions.reduce((acc, t) => acc + t.duration, 0);

  if (totalLength > duration + 0.2 /*tolerancia*/) {
    throw new Error(`Plan supera duraci√≥n solicitada (${duration}s)`);
  }

  return result;
}

// ---------- 6¬∑ Ejemplo de uso -----------------------------------

/*  (En tu router de ‚Äúnuevo proyecto‚Äù)

import { createVideoPlan } from '../services/LLMService.js';

router.post('/plan', async (req, res) => {
  const { prompt, style, duration } = req.body;   // validated previously

  try {
    const plan = await createVideoPlan(prompt, style, duration);
    // Guarda plan en DB y lanza workflow clips/tts/sfx
    res.json({ ok: true, plan });
  } catch (err) {
    res.status(400).json({ error: (err as Error).message });
  }
});
*/

// ---------------------------------------------------------------

```

### üîë Puntos clave del archivo

| Secci√≥n                      | Por qu√© es importante                                                                                    |
| ---------------------------- | -------------------------------------------------------------------------------------------------------- |
| **Tipos/Zod**                | Garantizan que *VideoPlan* siempre cumpla el esquema necesario para `clipService.ts`, `ttsService`, etc. |
| **DurationMap**              | Calcula cu√°ntas escenas y transiciones se necesitan seg√∫n 10/15/30/45/60 s.                              |
| **buildSystemPrompt()**      | Gu√≠a a GPT-4o para que piense como *equipo de cine* y entregue JSON limpio.                              |
| **jsonrepair + Zod.parse**   | Repara y valida la respuesta de GPT evitando errores en producci√≥n.                                      |
| **Verificaci√≥n totalLength** | Se asegura de no exceder la duraci√≥n pedida (incluyendo transiciones).                                   |

### üëü C√≥mo encaja con tus otros servicios

1. **`createVideoPlan()`** devuelve el JSON.
2. Guardas el plan en DB (`projectId`, etc.).
3. **clipService.ts** recorre `plan.scenes` ‚Üí genera un clip usando **Replicate**

   * Endpoint: `POST /v1/predictions` con `{ model, input: { prompt, fps, length } }` ([replicate.com][1])
4. **ttsService** recorre `plan.characters` y `audioEvents` (`type==='vo'`).

   * Llama a **Murf** o **ElevenLabs** con el *voiceId* apropiado.
5. **sfxService** descarga efectos de **Freesound** seg√∫n `assetId`.
6. **renderService** concatena clips + transiciones + audio ‚Üí aplica LUT / grano ‚Üí exporta.

As√≠ tu backend opera **en cascada y sin ambig√ºedades**, produciendo un video fluido en cualquier estilo y duraci√≥n que el usuario pida.

---

## ¬øQu√© sigue?

* üíæ Copia `LLMService.ts` en `src/services`.
* Ajusta `.env` con tus claves de OpenRouter, Murf, ElevenLabs y Replicate.
* Aseg√∫rate de tener `jsonrepair` y `zod` instalados (`npm i jsonrepair zod`).
* Conecta tu endpoint `/plan` al frontend para devolver el *VideoPlan* y lanzar la pipeline.

Cuando quieras avanzar con **ttsService**, **sfxService** o refinar `clipService.ts` para estilos espec√≠ficos, solo dime ‚Äì te entrego los archivos completos igual de detallados.

[1]: https://replicate.com/docs/topics/predictions/create-a-prediction?utm_source=chatgpt.com "Create a prediction - Replicate docs"



vista un poco general 

### üöÄ Blueprint complet√≠simo de tu **Cinema AI**

*(versi√≥n ‚Äúsin omisiones‚Äù)*

> **Archivos ya en tu repo**
>
> * `LLMService.ts`  (antes se llamaba `LLMService.ts` ‚Äî plan de rodaje)
> * `clipService.ts`  (genera v√≠deo IA con Replicate)
> * `VoiceService.ts` (TTS con Murf / ElevenLabs)
> * `MusicService.ts` (banda sonora + SFX con Freesound)
> * `FfmpegService.ts` (renderiza audio-v√≠deo, LUT, grain)
> * `RenderPipeline.ts` (coordinador maestro / cola de jobs)

A continuaci√≥n vas a encontrar:

1. **Visi√≥n de gr√∫a (Big Picture)** ‚Äì c√≥mo encajan todos los servicios.
2. **Roles y flujo exacto (paso a paso, escena a escena).**
3. **Contratos de datos entre servicios (qu√© recibe y qu√© devuelve cada uno).**
4. **Profundizaci√≥n por estilos (`realistic`, `anime`, `commercial`, etc.).**
5. **Ejemplo complet√≠simo de `VideoPlan` para un v√≠deo 30 s estilo Anime (9 clips).**
6. **Manejo de errores, re-intentos, validaciones y monitoreo.**
7. **Check-list ‚Äúantes de exportar‚Äù para que NADA se vea raro.**

---

## 1 ¬∑ Visi√≥n general

```
Usuario ‚Üí /plan (LLMService) ‚Üí VideoPlan
            ‚Üì
      RenderPipeline (RabbitMQ √≥ BullMQ)
            ‚îú‚îÄ‚îÄ clipService       (Replicate)
            ‚îú‚îÄ‚îÄ VoiceService      (Murf / ElevenLabs)
            ‚îú‚îÄ‚îÄ MusicService      (Artlist + Freesound)
            ‚îî‚îÄ‚îÄ FfmpegService     (ensamble + LUT + mix)
                ‚Üì
        master.mov   +   thumbs + metadata.json
```

* **LLMService** = guionista + director + DP virtual.
* **RenderPipeline** = 1er AD (asistente de direcci√≥n) que lanza y supervisa cada ‚Äúdepartamento‚Äù.
* **Cada servicio** corre de manera idempotente y reporta progreso a Redis/PostgreSQL (`IN_QUEUE ‚Üí PROCESSING ‚Üí DONE/FAILED`).
* **MinIO/S3** guarda assets intermedios y finales.

---

## 2 ¬∑ Flujo narrativo y t√©cnico detallado

| Etapa | Actor virtual             | Archivo                         | Qu√© hace                                                                                                                                                 | Salida                 |
| ----- | ------------------------- | ------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------- |
| 1     | Guionista ¬∑ Director      | **LLMService.ts**               | Convierte el prompt en `VideoPlan` basado en estilo y duraci√≥n; define beats, escenas, personajes, audio, transiciones.                                  | JSON validado          |
| 2     | 1er AD                    | **RenderPipeline.ts**           | Inserta job en cola (`projectId`).                                                                                                                       | Jobs hijos             |
| 3     | Director de fotograf√≠a IA | **clipService.ts**              | Para cada `scene.prompt` genera un `.mp4` 5 s (o 4.5 s) con Replicate.                                                                                   | `clip_{sceneId}.mp4`   |
| 4     | Ingeniero de di√°logo      | **VoiceService.ts**             | Para cada evento VO crea un `.wav` con Murf ‚Üí fallback ElevenLabs.                                                                                       | `vo_{char}_{tc}.wav`   |
| 5     | Dise√±ador sonoro          | **MusicService.ts**             | (a) Descarga m√∫sica Artlist/cc0, ajusta a ‚àí14 LUFS. <br>(b) Descarga/normaliza SFX. <br>(c) Genera ‚Äúswoosh‚Äù para transiciones si falta.                  | `bgm.wav`, `sfx_*.wav` |
| 6     | Editor ¬∑ Colorista        | **FfmpegService.ts**            | ‚ë† Ordena clips + transiciones<br>‚ë° Aplica LUT / cel shading<br>‚ë¢ Concat audio stems<br>‚ë£ Mix final (‚àí14 LUFS, peaks ‚àí1 dBTP)<br>‚ë§ Exporta master ProRes. | `master.mov`           |
| 7     | QC bot                    | (puede vivir en RenderPipeline) | Verifica blur, flicker, loudness, duraci√≥n. Si falla ‚Üí RETRY o marca `REVIEW`.                                                                           | Flag en DB             |
| 8     | API                       | (cualquier ruta)                | Sirve streaming HLS o descarga master.                                                                                                                   | URL final              |

---

## 3 ¬∑ Contratos entre servicios

### 3.1 `VideoPlan` (emitido por LLMService) ‚Äì RESUMEN

```jsonc
{
  "prompt":   "Una chica encuentra ‚Ä¶",
  "style":    "anime",
  "duration": 30,
  "beats":    ["Beat 1", "..."],
  "characters":[{ ... }],
  "scenes":   [{ id:"01A", prompt:"...", cam:{...}, audioEvents:[...] }, ...],
  "transitions":[{ between:["01A","02B"], type:"whip-pan", duration:1 }]
}
```

### 3.2 Clip ‚Üí Voice ‚Üí Music

* **clipService** consume `scenes[]` ‚Üí produce `clips[]`
* **VoiceService** consume `characters[]` + `audioEvents.type === 'vo'`
* **MusicService** consume `audioEvents.type === 'sfx'` + `duration`

### 3.3 RenderPipeline

```ts
type JobStatus = 'IN_QUEUE' | 'PROCESSING' | 'DONE' | 'FAILED';
interface ClipStatus { sceneId: string; status: JobStatus; url?: string; }
interface AudioStatus{ stem: 'vo'|'bgm'|'sfx'; status: JobStatus; url?: string; }
interface RenderStatus{ masterUrl?: string; qcPassed?: boolean; ... }
```

---

## 4 ¬∑ Matices por estilo

| Estilo         | Paleta / LUT                          | Movimiento c√°mara                  | M√∫sica                    | SFX                          | Voz                      |
| -------------- | ------------------------------------- | ---------------------------------- | ------------------------- | ---------------------------- | ------------------------ |
| **realistic**  | Kodak 2383, contraste medio           | Drones suaves, steadicam           | Orquestal atmosf√©rico     | Naturales (viento, pasos)    | Conversaci√≥n √≠ntima      |
| **anime**      | Tonos pastel o ne√≥n; outline opcional | Tilt-ups heroicos, barridos lentos | Piano + cuerdas + pads    | ‚ÄúSparkle‚Äù, ‚Äúwhoosh‚Äù m√≠sticos | Narraci√≥n po√©tica, joven |
| **cartoon**    | Colores s√≥lidos, saturados            | Giros r√°pidos, jumps               | Jazz alegre o chiptune    | Boings, pops                 | Voces caricaturescas     |
| **game**       | LUT fr√≠o/teal o LUT futurista         | C√°mara √©pica 3¬™ persona            | Tr√°iler √©pico electr√≥nico | SFX UI, zumbidos             | Narrador profundo        |
| **commercial** | Alto contraste + highlight product    | Cortes 1-2 s, zooms                | Pop/funk con ritmo alto   | SFX swish                    | Voice-over vendedor      |

*Los presets viven en un archivo `stylePresets.ts` consumido por LLMService.*

---

## 5 ¬∑ Ejemplo hiper-completo: 30 s ¬∑ Estilo Anime

> (Resumen visual; tu `LLMService.ts` ya genera algo similar pero en JSON estricto)

```
‚Ä¢ Duraci√≥n: 30 s ‚Üí 5 escenas √ó 5 s  + 4 transiciones √ó 1 s
‚Ä¢ Beats:
  1) Chica camina por bosque neblinoso
  2) Encuentra resplandor entre ra√≠ces
  3) Abre puerta luminosa
  4) Se asoma a mundo flotante
  5) Sonr√≠e, da un paso
‚Ä¢ Personaje: "Aya" 16 a√±os, uniforme escolar ligero, pelo rosa.
‚Ä¢ M√∫sica: Piano arpegiado 90 BPM  ‚Üí cuerdas cuando abre la puerta.
‚Ä¢ VO: ‚ÄúSiempre intu√≠ que hab√≠a algo m√°s all√° de este bosque‚Ä¶‚Äù
‚Ä¢ SFX: pasos hoja seca (0:01), resplandor m√°gico (0:08), viento et√©rico (0:22)
‚Ä¢ LUT: Pastel warm + ligera vi√±eta
‚Ä¢ Lentes: 24 mm / 35 mm / 50 mm / 35 mm / 85 mm
‚Ä¢ Transiciones: swirl de p√©talos (1 s) entre escenas.
```

---

## 6 ¬∑ Errores y re-intentos inteligentes

| Posible fallo                        | Servicio que detecta       | Acci√≥n correctiva                                  |
| ------------------------------------ | -------------------------- | -------------------------------------------------- |
| Clip con ‚Äúderrame‚Äù de color o glitch | **QC bot** (SSIM blur)     | clipService re-genera con otro `seed`              |
| Duraci√≥n no cuadra                   | **LLMService** (Zod check) | Ajusta `sceneDur` ¬±0.2 s antes de pasar a pipeline |
| Voz faltante                         | **VoiceService**           | Fallback a ElevenLabs + alerta Slack               |
| SFX 404                              | **MusicService**           | Inserta efecto gen√©rico, marca `WARN`              |
| Loudness fuera de rango              | **FfmpegService**          | Re-loudnorm o reduce peaks ‚àí3 dB                   |

---

## 7 ¬∑ Check-list final antes de exportar üîé

1. **Longitud exacta** = duraci√≥n solicitada ¬±0.05 s.
2. **Framerate** 23.976/24 fps uniforme.
3. **Personaje coherente** en todos los clips (nombre, vestuario, voz).
4. **Color**: histograma ŒîE -- comparaci√≥n de escena a escena < 3.
5. **Audio**: Mix ‚àí14 LUFS, peaks ‚â§ ‚àí1 dBTP; stems alineados.
6. **Transiciones** sin cortes abruptos ni saltos de brillo.
7. **Licencias** (Artlist, Freesound) registradas en `metadata.json`.
8. **Nombre de archivo** `projectId_v1_master.mov`.
9. **Miniaturas** auto-generadas cada 5 s (`thumb_0005.jpg`, etc.).
10. **Webhook** hacia frontend con estado `READY`.

---

### ‚õ≥  Con esto tu plataforma se comporta EXACTAMENTE como un estudio de animaci√≥n + post-producci√≥n profesional, para cualquier usuario, estilo o duraci√≥n que elijan.

> **Siguiente paso sugerido:** refactoriza `RenderPipeline.ts` para que lea los estados desde Redis/BullMQ y dispare notificaciones front-end en tiempo real (Socket.io) conforme cada servicio marca su `DONE`. Si lo necesitas, p√≠deme los hooks y el c√≥digo de ejemplo.




### üèóÔ∏è Anatom√≠a **extremadamente detallada** de `LLMService.ts`

*(Paso a paso, l√≠nea a l√≠nea, sin nada ‚Äúentre dientes‚Äù)*

> Objetivo: que entiendas **qu√© hace cada bloque**, por qu√© existe y c√≥mo se conecta con `clipService.ts`, `VoiceService.ts`, `MusicService.ts`, `FfmpegService.ts` y `RenderPipeline.ts`.

---

## 0. ¬øPor qu√© existe `LLMService`?

1. **Traductor creativo:** convierte un prompt corto (2-20 palabras) en un plan de rodaje profesional.
2. **Contrato de datos:** produce el JSON `VideoPlan` que consumen los dem√°s servicios.
3. **Guardi√°n de coherencia:** impone reglas de estilo (realistic, anime, ‚Ä¶) y de duraci√≥n (10/15/30/45/60 s) antes de que se gaste un solo cr√©dito de IA.
4. **Autocurador:** valida, repara y rechaza planes defectuosos.

---

## 1. Dependencias & configuraci√≥n

```ts
import { OpenAI } from 'openai';           // Chat completions GPT-4o
import { z }      from 'zod';              // Validaci√≥n fuerte
import { jsonrepair } from 'jsonrepair';   // Arregla JSON malformado
import { env }    from '../config/env.js'; // Claves y URLs
import { v4 as uuid } from 'uuid';         // IDs √∫nicos por escena
```

*Consejo:* exp√≥n todos los **timeouts** y **model names** en `.env` para swaps r√°pidos.

---

## 2. Constantes clave

```ts
export const STYLE_PRESETS: Record<Style, StylePreset> = {
  realistic:  {...},
  anime:      {...},
  cartoon:    {...},
  game:       {...},
  commercial: {...}
};

export const DurationMap = { 10:2, 15:3, 30:5, 45:7, 60:9 };
```

*`STYLE_PRESETS`* incluye LUT sugerido, paleta, lente favorita, voz sugerida, m√∫sica BPM base, SFX biblioteca, transici√≥n favorita.
Esto se inyecta din√°micamente en los prompts ‚Üí **el LLM se adapta al estilo sin que t√∫ cambies c√≥digo**.

---

## 3. Funciones auxiliares

### 3.1 `getSceneDuration(duration, nScenes)`

Devuelve segundos de **acci√≥n pura** por escena.
Para 30 s: `30 - (nScenes-1) * 1s_transici√≥n` ‚áí 5 s exactos.

### 3.2 `createSceneId(order)`

`return order.toString().padStart(2,'0') + String.fromCharCode(65+order);`
‚Üí ‚Äú01A‚Äù, ‚Äú02B‚Äù ‚Ä¶ id√©ntico a nomenclatura de un shot list real.

### 3.3 `buildScenePrompt( corePrompt, preset, beat, cam )`

* Concatena: ubicaci√≥n + luz + acci√≥n + emoci√≥n + lente + LUT/estilo.
* A√±ade ‚Äú**no watermark, no camera shakes**‚Äù para IA ‚Üí menos artefactos.
* Inserta `preset.negativePrompts` (ej. ‚Äúextra fingers, distorted face‚Äù).

### 3.4 `makeAudioEvents( beat, characters, preset )`

* VO inicial (si `preset.defaultNarrator`)
* SFX semilla: viento, ambiente, swoosh seg√∫n estilo.
* Devuelve array con `timecode` relativo a escena (float 0‚ÄìX).

---

## 4. **System Prompt** generador

```ts
function buildSystemPrompt(style: Style, duration: AllowedDuration) {
  const preset      = STYLE_PRESETS[style];
  const nScenes     = DurationMap[duration];
  const sceneDur    = getSceneDuration(duration, nScenes);

  return `
Eres un equipo de cine de clase mundial. Tu misi√≥n es devolver SOLO JSON
v√°lido con el siguiente esquema (no texto extra):

{
  prompt:        string,             // prompt user original
  style:         "${style}",
  duration:      ${duration},
  beats:         string[${nScenes}],
  characters:    Character[],
  scenes:        Scene[${nScenes}],
  transitions:   Transition[${nScenes-1}]
}

Reglas IMPERDIBLES:
‚Ä¢ Cada escena ‚âà ${sceneDur}s, transici√≥n = 1s.
‚Ä¢ Usa LUT, paleta y m√∫sica sugeridas para estilo "${style}".
‚Ä¢ Mant√©n SAME protagonist appearance en todas las escenas.
‚Ä¢ Introduce VO/SFX donde aporte emoci√≥n.
‚Ä¢ Evita repetici√≥n de planos.
‚Ä¢ Nunca excedas la duraci√≥n total.

Definiciones r√°pidas:
- shot: wide | medium | close
- move: dolly-in | crane-down | whip-pan | static | handheld
- lens: 24 | 35 | 50 | 85 (mm simulados)

Responde SOLO con el JSON.`;
}
```

---

## 5. **Flujo principal `createVideoPlan()`**

1. **Construye mensajes**: `[system,msg] + [user,msg]`.
2. **Hace la llamada** a GPT-4o con `temperature 0.4` (mezcla creatividad/control).
3. **jsonrepair** ‚Ü£ arregla tildes/quotes perdidos.
4. **`zod.parse`** ‚Ü£ aborta si algo no cumple.
5. **Consistencia de tiempo**: suma acci√≥n + transiciones = `duration`.
6. **Augmenta**: si falta `id` a una escena ‚Üí genera con `uuid()`.
7. **Persistencia opcional**: escribe en `db.video_plans`.
8. **Return** tipado ‚Üí downstream feliz.

---

## 6. Qu√© **NO** omit√≠ ahora

| Tema                             | D√≥nde aparece                                                                                  |
| -------------------------------- | ---------------------------------------------------------------------------------------------- |
| Negative prompts anti-artefactos | `STYLE_PRESETS[preset].negativePrompts`                                                        |
| Semillas deterministas           | `Scene.cam.seed = uuidToInt(scene.id)`                                                         |
| Selecci√≥n de voz autom√°tica      | `preset.defaultNarrator` + sexo personaje                                                      |
| M√∫sica BPM acorde duraci√≥n       | `preset.bpmBase` (‚âà 120 para commercial, 90 anime, 70 realistic)                               |
| Fallback model                   | `preset.modelOrder = ['runway/gen-2', 'stability/stable-video', ...]` (clipService leer√° esto) |
| Transici√≥n favorita por estilo   | `"particle-swirl"` (anime), `"whip-pan"` (commercial)‚Ä¶                                         |
| Over-shoot padding               | Cada escena end = start + dur ‚Äì 0.2 s (para fade-out)                                          |

---

## 7. Ejemplo **JSON final** (resumido)

```jsonc
{
  "prompt": "Una chica encuentra una puerta m√°gica en el bosque",
  "style": "anime",
  "duration": 30,
  "beats": [
    "Chica camina entre √°rboles nebulosos",
    "Luz resplandeciente entre ra√≠ces",
    "Abre puerta luminosa",
    "Mundo flotante al otro lado",
    "Chica sonr√≠e y entra"
  ],
  "characters": [{
    "id": "aya",
    "name": "Aya",
    "age": 16,
    "gender": "female",
    "height": "1.60m",
    "build": "delgada",
    "face": "ojos grandes marr√≥n, cabello rosa",
    "wardrobe": "uniforme escolar blanco, abrigo azul",
    "voiceId": "en-US-sayaka",       // Murf
    "emotion": "curiosidad"
  }],
  "scenes": [
    {
      "id": "01A",
      "order": 0,
      "start": 0,
      "end": 5,
      "prompt": "Anime pastel forest, morning mist...",
      "audioEvents": [
        { "type":"vo", "characterId":"aya", "timecode":0,
          "text":"Siempre supe que el bosque guardaba secretos..." },
        { "type":"sfx", "assetId":"footstep_leaves", "timecode":1.2 }
      ],
      "cam": { "lens": 35, "move": "tracking", "shot": "medium" }
    },
    "... 4 escenas m√°s ‚Ä¶"
  ],
  "transitions": [
    { "between":["01A","02B"],"type":"petal-swirl","duration":1 },
    "... 3 m√°s ‚Ä¶"
  ]
}
```

---

## 8. Conexi√≥n con **VoiceService**, **MusicService**, **clipService**

* **clipService** lee `scene.prompt`, `cam`, `preset.modelOrder`, `seed`.
* **VoiceService** crea VO porque `audioEvents[0].type === 'vo'`.
* **MusicService**:

  1. Carga *cue* en BPM `preset.bpmBase`.
  2. Ajusta para que empiece en TC 0 y acabe en `duration`.
  3. Inserta SFX id `footstep_leaves` (mapea a Freesound #12345).
* **FfmpegService** concat clips en orden `scene.order`, intercala transiciones (mapeadas por `between` IDs).
* **RenderPipeline** trackea todo y marca `READY`.

---

## 9. Checks avanzados que s√≠ hace `LLMService`

| Check                  | Ejemplo                                                                 |
| ---------------------- | ----------------------------------------------------------------------- |
| **Lens diversity**     | Proh√≠be repetir mismo mm en dos escenas consecutivas (evita monoton√≠a). |
| **Shot variety**       | Al menos 1 wide y 1 close-up en total.                                  |
| **VO pacing**          | No permite VO > 80 % del clip (respira).                                |
| **Prompt length**      | < 280 chars para no ‚Äúahogar‚Äù a Replicate.                               |
| **Keywords anti-NSFW** | Si user prompt trae ‚Äúblood, gore‚Äù y estilo = cartoon ‚Üí abort.           |

---

## 10. Hooks de monitoreo (opcional)

```ts
import pino from 'pino';
const log = pino({ name: 'LLMService' });

log.info({ prompt, style, duration }, 'plan-request');

try {
  const plan = await createVideoPlan(...);
  log.info({ projectId, scenes: plan.scenes.length }, 'plan-success');
} catch (err) {
  log.error(err, 'plan-error');
}
```

Logs se env√≠an a Grafana Loki ‚Üí alerta si `plan-error > 3/min`.

---

### üé¨ Con esto `LLMService.ts` queda **documentado al m√°ximo**, y tu equipo (o Copilot) puede mantenerlo sin sorpresas.

Si a√∫n hay un √°rea que quieras expandir (p.ej. plantillas de audio, seeds, fallback locales, multi-idioma) dime cu√°l y la pulimos.
